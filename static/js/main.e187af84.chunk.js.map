{"version":3,"sources":["components/js/SinglePokemon.js","components/js/Pagination.js","components/js/PokemonFilter.js","components/js/Navbar.js","components/js/Loading.js","components/js/PokemonList.js","components/js/PokemonInfo.js","components/js/Button.js","components/js/SinglePokemonDetails.js","App.js","serviceWorker.js","index.js"],"names":["SinglePokemon","name","url","useState","pokemonInfo","setPokemonInfo","pokemonId","setPokemonId","useEffect","isCancelled","a","split","length","axios","result","data","console","error","getDetailData","base_experience","height","weight","className","to","sprites","back_default","src","front_default","alt","toLowerCase","map","pokemonName","charAt","toUpperCase","substring","join","Pagination","handlePreviousPage","handleNextPage","onClick","PokemonFilter","handleInput","htmlFor","type","id","placeholder","onChange","Navbar","Loading","PokemonList","pokemons","setPokemons","loading","setLoading","currentPage","setCurrentPage","previousPage","setPreviousPage","nextPage","setNextPage","inputValue","setInputValue","previous","next","results","getData","filterPokemons","filter","pokemon","includes","e","target","value","filteredPokemon","key","PokemonInfo","pokemonDetails","pokemonFrontImg","pokemonHeight","pokemonWeight","pokemonExperience","pokemonStats","pokemonDescription","pokemonCatchRate","pokemonEggGroups","pokemonAbilities","s","speed","specialDefense","specialAttack","defense","attack","hp","Button","text","SinglePokemonDetails","props","setPokemonDetails","match","params","detailsUrl","speciesUrl","abilities","ability","stats","forEach","stat","log","speciesResult","flavor_text_entries","some","flavor","language","flavor_text","group","Math","round","getSinglePokemonData","App","basename","process","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e187af84.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/SinglePokemon.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SinglePokemon = ({ name, url }) => {\r\n  const [pokemonInfo, setPokemonInfo] = useState([]);\r\n  const [pokemonId, setPokemonId] = useState();\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    const getDetailData = async () => {\r\n      const pokemonId = url.split(\"/\")[url.split(\"/\").length - 2];\r\n\r\n      try {\r\n        const result = await axios(\r\n          `https://pokeapi.co/api/v2/pokemon/${pokemonId}`\r\n        );\r\n\r\n        if (!isCancelled) {\r\n          setPokemonInfo(result.data);\r\n          setPokemonId(pokemonId);\r\n        }\r\n      } catch (e) {\r\n        if (!isCancelled) {\r\n          console.error(e);\r\n        }\r\n      }\r\n    };\r\n\r\n    getDetailData();\r\n\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [url]);\r\n\r\n  const { base_experience, height, weight } = pokemonInfo;\r\n\r\n  return (\r\n    <Link className=\"pokemon-link\" to={`singlePokemonDetails/${pokemonId}`}>\r\n      <div className=\"single-pokemon\">\r\n        <h3 className=\"pokemon-number\">#{pokemonId}</h3>\r\n        {(pokemonInfo || 0) &&\r\n          (pokemonInfo.sprites || 0) &&\r\n          (pokemonInfo.sprites.back_default || 0) && (\r\n            <img\r\n              src={pokemonInfo.sprites.front_default}\r\n              alt=\"pokemon-front\"\r\n              className=\"pokemon-image\"\r\n            />\r\n          )}\r\n        <h1 className=\"pokemon-name\">\r\n          {name\r\n            .toLowerCase()\r\n            .split(\" \")\r\n            .map(\r\n              (pokemonName) =>\r\n                pokemonName.charAt(0).toUpperCase() + pokemonName.substring(1)\r\n            )\r\n            .join(\"\")}\r\n        </h1>\r\n        <p>Base experience: {base_experience} points</p>\r\n        <p>Height: {height / 10} meters</p>\r\n        <p>Weight: {weight / 10} kilograms</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n};\r\n\r\nSinglePokemon.propTypes = {\r\n  name: PropTypes.string,\r\n  url: PropTypes.string,\r\n};\r\n\r\nexport default SinglePokemon;\r\n","import React from \"react\";\r\nimport \"../css/Pagination.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Pagination = ({ handlePreviousPage, handleNextPage }) => {\r\n  return (\r\n    <div className=\"buttons\">\r\n      {handlePreviousPage && (\r\n        <button className=\"button-previous\" onClick={handlePreviousPage}>\r\n          Previous Page\r\n        </button>\r\n      )}\r\n      {handleNextPage && (\r\n        <button className=\"button-next\" onClick={handleNextPage}>\r\n          Next Page\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  handlePreviousPage: PropTypes.func,\r\n  handleNextPage: PropTypes.func,\r\n};\r\n\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport \"../css/PokemonFilter.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PokemonFilter = ({ handleInput }) => {\r\n  return (\r\n    <div className=\"filter\">\r\n      <label htmlFor=\"pokemon-filter\">Filter pokemon by name.</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        id=\"filter\"\r\n        placeholder=\"Start typing pokemon name.\"\r\n        onChange={handleInput}\r\n        className=\"input\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nPokemonFilter.propTypes = {\r\n  handleInput: PropTypes.func,\r\n};\r\n\r\nexport default PokemonFilter;\r\n","import React from \"react\";\r\nimport \"../css/Navbar.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <Link className=\"navbar-home-link\" to={\"/\"}>\r\n        <h1 className=\"navbar-title\">Pokedex</h1>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"../css/Loading.scss\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div className=\"loading\">\r\n      <h1 className=\"loading-text\">Loading...</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport SinglePokemon from \"./SinglePokemon\";\r\nimport Pagination from \"./Pagination\";\r\nimport PokemonFilter from \"./PokemonFilter\";\r\nimport Navbar from \"./Navbar\";\r\nimport \"../css/PokemonList.scss\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst PokemonList = () => {\r\n  const [pokemons, setPokemons] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentPage, setCurrentPage] = useState(\r\n    \"https://pokeapi.co/api/v2/pokemon\"\r\n  );\r\n  const [previousPage, setPreviousPage] = useState();\r\n  const [nextPage, setNextPage] = useState();\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    const getData = async () => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const result = await axios(currentPage);\r\n\r\n        if (!isCancelled) {\r\n          setLoading(false);\r\n          setPreviousPage(result.data.previous);\r\n          setNextPage(result.data.next);\r\n          setPokemons(result.data.results);\r\n        }\r\n      } catch (e) {\r\n        if (!isCancelled) {\r\n          console.error(e);\r\n        }\r\n      }\r\n    };\r\n\r\n    getData();\r\n\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [currentPage]);\r\n\r\n  const handlePreviousPage = () => {\r\n    setCurrentPage(previousPage);\r\n  };\r\n\r\n  const handleNextPage = () => {\r\n    setCurrentPage(nextPage);\r\n  };\r\n\r\n  const handleInput = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  let filterPokemons = pokemons.filter((pokemon) => {\r\n    return pokemon.name.toLowerCase().includes(inputValue.toLowerCase());\r\n  });\r\n\r\n  if (loading) return <Loading />;\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div className=\"pokemon-list\">\r\n        <PokemonFilter handleInput={handleInput} />\r\n        <div className=\"pokemon\">\r\n          {filterPokemons.map((filteredPokemon) => (\r\n            <SinglePokemon\r\n              key={filteredPokemon.name}\r\n              name={filteredPokemon.name}\r\n              url={filteredPokemon.url}\r\n            />\r\n          ))}\r\n        </div>\r\n        <Pagination\r\n          handlePreviousPage={previousPage ? handlePreviousPage : null}\r\n          handleNextPage={nextPage ? handleNextPage : null}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PokemonList;\r\n","import React from \"react\";\r\nimport \"../css/PokemonInfo.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PokemonInfo = ({ pokemonDetails }) => {\r\n  const {\r\n    pokemonName,\r\n    pokemonId,\r\n    pokemonFrontImg,\r\n    pokemonHeight,\r\n    pokemonWeight,\r\n    pokemonExperience,\r\n    pokemonStats,\r\n    pokemonDescription,\r\n    pokemonCatchRate,\r\n    pokemonEggGroups,\r\n    pokemonAbilities,\r\n  } = pokemonDetails;\r\n\r\n  return (\r\n    <div className=\"pokemon-page\">\r\n      <div className=\"title\">\r\n        <h1 className=\"individual-name\">\r\n          {(pokemonName || 0) &&\r\n            pokemonName\r\n              .toLowerCase()\r\n              .split(\" \")\r\n              .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n              .join(\" \")}\r\n        </h1>\r\n        <h1 className=\"pokemon-id\">#{pokemonId}</h1>\r\n      </div>\r\n      <div className=\"base-info\">\r\n        <img\r\n          className=\"individual-image\"\r\n          src={pokemonFrontImg}\r\n          alt=\"pokemon-front\"\r\n        />\r\n        <div className=\"info-group1\">\r\n          <div className=\"base-stats\">\r\n            <h3>Base stats:</h3>\r\n            <p>Height: {pokemonHeight} meters</p>\r\n            <p>Weight: {pokemonWeight} kilograms</p>\r\n            <p>Base experience: {pokemonExperience} points</p>\r\n          </div>\r\n          <div className=\"additional-stats\">\r\n            <h3>Additional stats:</h3>\r\n            <p>Speed: {(pokemonStats || 0) && pokemonStats.speed}</p>\r\n            <p>\r\n              Special-Defense:{\" \"}\r\n              {(pokemonStats || 0) && pokemonStats.specialDefense}\r\n            </p>\r\n            <p>\r\n              Special-Attack:{\" \"}\r\n              {(pokemonStats || 0) && pokemonStats.specialAttack}\r\n            </p>\r\n            <p>Defense: {(pokemonStats || 0) && pokemonStats.defense}</p>\r\n            <p>Attack: {(pokemonStats || 0) && pokemonStats.attack}</p>\r\n            <p>HP: {(pokemonStats || 0) && pokemonStats.hp}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"info-groups\">\r\n        <div className=\"info-group2\">\r\n          <h3>{pokemonDescription}</h3>\r\n        </div>\r\n        <div className=\"info-group3\">\r\n          <p>\r\n            <strong>Catch Rate: </strong>\r\n            {pokemonCatchRate}%\r\n          </p>\r\n          <p>\r\n            <strong>Egg Group: </strong>\r\n            {pokemonEggGroups}\r\n          </p>\r\n          <p>\r\n            <strong>Abilities: </strong>\r\n            {pokemonAbilities}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPokemonInfo.propTypes = {\r\n  pokemonDetails: PropTypes.shape({\r\n    pokemonName: PropTypes.string,\r\n    pokemonId: PropTypes.string,\r\n    pokemonFrontImg: PropTypes.string,\r\n    pokemonHeight: PropTypes.number,\r\n    pokemonWeight: PropTypes.number,\r\n    pokemonExperience: PropTypes.number,\r\n    pokemonStats: PropTypes.object,\r\n    pokemonDescription: PropTypes.string,\r\n    pokemonCatchRate: PropTypes.number,\r\n    pokemonEggGroups: PropTypes.string,\r\n    pokemonAbilities: PropTypes.array,\r\n  }),\r\n};\r\n\r\nexport default PokemonInfo;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"../css/Button.scss\";\r\n\r\nconst Button = ({ text }) => {\r\n  return (\r\n    <div className=\"button\">\r\n      <Link to={\"/\"}>\r\n        <button className=\"button-back\">{text}</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Navbar from \"./Navbar\";\r\nimport PokemonInfo from \"./PokemonInfo\";\r\nimport Button from \"./Button\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst SinglePokemonDetails = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [pokemonDetails, setPokemonDetails] = useState({\r\n    pokemonName: null,\r\n    pokemonFrontImg: null,\r\n    pokemonStats: {\r\n      speed: null,\r\n      specialDefense: null,\r\n      specialAttack: null,\r\n      defense: null,\r\n      attack: null,\r\n      hp: null,\r\n    },\r\n    pokemonAbilities: null,\r\n    pokemonDescription: null,\r\n    pokemonHeight: null,\r\n    pokemonWeight: null,\r\n    pokemonEggGroups: null,\r\n    pokemonCatchRate: null,\r\n    pokemonId: null,\r\n    pokemonExperience: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    const { pokemonId } = props.match.params;\r\n\r\n    const getSinglePokemonData = async () => {\r\n      const detailsUrl = `https://pokeapi.co/api/v2/pokemon/${pokemonId}`;\r\n      const speciesUrl = `https://pokeapi.co/api/v2/pokemon-species/${pokemonId}`;\r\n\r\n      setLoading(true);\r\n\r\n      try {\r\n        const result = await axios(detailsUrl);\r\n        const pokemonName = result.data.name;\r\n        const pokemonFrontImg = result.data.sprites.front_default;\r\n        const pokemonAbilities = result.data.abilities.map((ability) => {\r\n          return ability.ability.name\r\n            .toLowerCase()\r\n            .split(\"-\")\r\n            .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n            .join(\" \");\r\n        });\r\n        const pokemonHeight = result.data.height / 10;\r\n        const pokemonWeight = result.data.weight / 10;\r\n        const pokemonExperience = result.data.base_experience;\r\n\r\n        let { speed, specialDefense, specialAttack, defense, attack, hp } = \"\";\r\n\r\n        result.data.stats.forEach((stat) => {\r\n          switch (stat.stat.name) {\r\n            case \"speed\":\r\n              speed = stat[\"base_stat\"];\r\n              break;\r\n            case \"special-defense\":\r\n              specialDefense = stat[\"base_stat\"];\r\n              break;\r\n            case \"special-attack\":\r\n              specialAttack = stat[\"base_stat\"];\r\n              break;\r\n            case \"defense\":\r\n              defense = stat[\"base_stat\"];\r\n              break;\r\n            case \"attack\":\r\n              attack = stat[\"base_stat\"];\r\n              break;\r\n            case \"hp\":\r\n              hp = stat[\"base_stat\"];\r\n              break;\r\n            default:\r\n              console.log(\"No stats data available.\");\r\n          }\r\n        });\r\n\r\n        const speciesResult = await axios(speciesUrl);\r\n\r\n        speciesResult.data.flavor_text_entries.some((flavor) => {\r\n          if (flavor.language.name === \"en\") {\r\n            setPokemonDetails({ pokemonDescription: flavor.flavor_text });\r\n            return null;\r\n          } else {\r\n            return console.log(\"text not found\");\r\n          }\r\n        });\r\n\r\n        const pokemonEggGroups = speciesResult.data[\"egg_groups\"]\r\n          .map((group) => {\r\n            return group.name\r\n              .toLowerCase()\r\n              .split(\"\")\r\n              .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\r\n              .join(\" \");\r\n          })\r\n          .join(\", \");\r\n\r\n        const pokemonCatchRate = Math.round(\r\n          (100 / 255) * speciesResult.data[\"capture_rate\"]\r\n        );\r\n\r\n        if (!isCancelled) {\r\n          setLoading(false);\r\n          setPokemonDetails({\r\n            pokemonName,\r\n            pokemonFrontImg,\r\n            pokemonAbilities,\r\n            pokemonHeight,\r\n            pokemonWeight,\r\n            pokemonExperience,\r\n            pokemonEggGroups,\r\n            pokemonCatchRate,\r\n            pokemonStats: {\r\n              speed,\r\n              specialDefense,\r\n              specialAttack,\r\n              defense,\r\n              attack,\r\n              hp,\r\n            },\r\n            pokemonId,\r\n          });\r\n        }\r\n      } catch (e) {\r\n        if (!isCancelled) {\r\n          console.error(e);\r\n        }\r\n      }\r\n    };\r\n    getSinglePokemonData();\r\n\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [props.match.params]);\r\n\r\n  if (loading) return <Loading />;\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <PokemonInfo pokemonDetails={pokemonDetails} />\r\n      <Button text=\"Back to main page\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SinglePokemonDetails;\r\n","import React from \"react\";\nimport \"./components/css/Global.scss\";\nimport PokemonList from \"./components/js/PokemonList\";\nimport SinglePokemonDetails from \"./components/js/SinglePokemonDetails\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <>\n        <Switch>\n          <Route exact path=\"/\" component={PokemonList} />\n          <Route\n            exact\n            path=\"/singlePokemonDetails/:pokemonId\"\n            component={SinglePokemonDetails}\n          />\n        </Switch>\n      </>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}